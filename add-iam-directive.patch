diff --git a/dist/index.js b/dist/index.js
index d734462..ff14d92 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -147,6 +147,12 @@ Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
     return _type.GraphQLDeprecatedDirective;
   }
 });
+Object.defineProperty(exports, 'GraphQLIAMDirective', {
+  enumerable: true,
+  get: function get() {
+    return _type.GraphQLIAMDirective;
+  }
+});
 Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
   enumerable: true,
   get: function get() {
diff --git a/dist/index.js.flow b/dist/index.js.flow
index 34fbd4b..79dcbd8 100644
--- a/dist/index.js.flow
+++ b/dist/index.js.flow
@@ -62,6 +62,7 @@ export {
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
   // Constant Deprecation Reason
   DEFAULT_DEPRECATION_REASON,
   // Meta-field definitions.
diff --git a/dist/index.mjs b/dist/index.mjs
index 8feb594..4ea629a 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -44,7 +44,7 @@ TypeKind,
 // Scalars
 specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID,
 // Built-in Directives defined by the Spec
-specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,
+specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective,
 // Constant Deprecation Reason
 DEFAULT_DEPRECATION_REASON,
 // Meta-field definitions.
diff --git a/dist/type/definition.js.flow b/dist/type/definition.js.flow
index c1385da..e5e1a19 100644
--- a/dist/type/definition.js.flow
+++ b/dist/type/definition.js.flow
@@ -832,6 +832,7 @@ export type GraphQLFieldConfig<
   resolve?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   subscribe?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   deprecationReason?: ?string,
+  iamKey?: ?string,
   description?: ?string,
   astNode?: ?FieldDefinitionNode,
 };
@@ -862,6 +863,7 @@ export type GraphQLField<
   subscribe?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   isDeprecated?: boolean,
   deprecationReason?: ?string,
+  iamKey?: ?string,
   astNode?: ?FieldDefinitionNode,
 };
 
diff --git a/dist/type/directives.js b/dist/type/directives.js
index 2d6861d..3c8434f 100644
--- a/dist/type/directives.js
+++ b/dist/type/directives.js
@@ -3,7 +3,7 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
+exports.specifiedDirectives = exports.GraphQLIAMDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
 exports.isDirective = isDirective;
 exports.isSpecifiedDirective = isSpecifiedDirective;
 
@@ -126,10 +126,25 @@ var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQ
   }
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+var GraphQLIAMDirective = exports.GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: _scalars.GraphQLString,
+      description: 'Defines the access key'
+    }
+  }
+});
+
 /**
  * The full list of specified directives.
  */
-var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];
+var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective];
 
 function isSpecifiedDirective(directive) {
   return specifiedDirectives.some(function (specifiedDirective) {
diff --git a/dist/type/directives.js.flow b/dist/type/directives.js.flow
index 9d4d776..0d3667a 100644
--- a/dist/type/directives.js.flow
+++ b/dist/type/directives.js.flow
@@ -150,6 +150,21 @@ export const GraphQLDeprecatedDirective = new GraphQLDirective({
   },
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+export const GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: GraphQLString,
+      description: 'Defines the access key',
+    },
+  },
+});
+
 /**
  * The full list of specified directives.
  */
@@ -157,6 +172,7 @@ export const specifiedDirectives: $ReadOnlyArray<*> = [
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
 ];
 
 export function isSpecifiedDirective(
diff --git a/dist/type/directives.mjs b/dist/type/directives.mjs
index 7ebf453..92cf953 100644
--- a/dist/type/directives.mjs
+++ b/dist/type/directives.mjs
@@ -107,10 +107,25 @@ export var GraphQLDeprecatedDirective = new GraphQLDirective({
   }
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+export var GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: GraphQLString,
+      description: 'Defines the access key'
+    }
+  }
+});
+
 /**
  * The full list of specified directives.
  */
-export var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];
+export var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective];
 
 export function isSpecifiedDirective(directive) {
   return specifiedDirectives.some(function (specifiedDirective) {
diff --git a/dist/type/index.js b/dist/type/index.js
index d2f215c..b63c881 100644
--- a/dist/type/index.js
+++ b/dist/type/index.js
@@ -330,6 +330,12 @@ Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
     return _directives.GraphQLDeprecatedDirective;
   }
 });
+Object.defineProperty(exports, 'GraphQLIAMDirective', {
+  enumerable: true,
+  get: function get() {
+    return _directives.GraphQLIAMDirective;
+  }
+});
 Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
   enumerable: true,
   get: function get() {
diff --git a/dist/type/index.js.flow b/dist/type/index.js.flow
index f7ac4fd..d7d1970 100644
--- a/dist/type/index.js.flow
+++ b/dist/type/index.js.flow
@@ -79,6 +79,7 @@ export {
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
   // Constant Deprecation Reason
   DEFAULT_DEPRECATION_REASON,
 } from './directives';
diff --git a/dist/type/index.mjs b/dist/type/index.mjs
index 50d5cff..20114c9 100644
--- a/dist/type/index.mjs
+++ b/dist/type/index.mjs
@@ -31,7 +31,7 @@ isDirective,
 // Directives Definition
 GraphQLDirective,
 // Built-in Directives defined by the Spec
-isSpecifiedDirective, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,
+isSpecifiedDirective, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective,
 // Constant Deprecation Reason
 DEFAULT_DEPRECATION_REASON } from './directives';
 
diff --git a/dist/type/introspection.js b/dist/type/introspection.js
index a64fc6c..403cad7 100644
--- a/dist/type/introspection.js
+++ b/dist/type/introspection.js
@@ -236,10 +236,12 @@ var __Type = exports.__Type = new _definition.GraphQLObjectType({
       fields: {
         type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Field)),
         args: {
-          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
+          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false },
+          includeIAM: { type: _scalars.GraphQLBoolean, defaultValue: false }
         },
         resolve: function resolve(type, _ref) {
-          var includeDeprecated = _ref.includeDeprecated;
+          var includeDeprecated = _ref.includeDeprecated,
+              includeIAM = _ref.includeIAM;
 
           if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
             var fields = (0, _objectValues2.default)(type.getFields());
@@ -248,6 +250,11 @@ var __Type = exports.__Type = new _definition.GraphQLObjectType({
                 return !field.deprecationReason;
               });
             }
+            if (!includeIAM) {
+              fields = fields.filter(function (field) {
+                return !field.iamKey;
+              });
+            }
             return fields;
           }
           return null;
@@ -321,6 +328,9 @@ var __Field = exports.__Field = new _definition.GraphQLObjectType({
       isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
       deprecationReason: {
         type: _scalars.GraphQLString
+      },
+      iamKey: {
+        type: _scalars.GraphQLString
       }
     };
   }
diff --git a/dist/type/introspection.js.flow b/dist/type/introspection.js.flow
index a4810c6..6fd6207 100644
--- a/dist/type/introspection.js.flow
+++ b/dist/type/introspection.js.flow
@@ -243,13 +243,17 @@ export const __Type = new GraphQLObjectType({
       type: GraphQLList(GraphQLNonNull(__Field)),
       args: {
         includeDeprecated: { type: GraphQLBoolean, defaultValue: false },
+        includeIAM: { type: GraphQLBoolean, defaultValue: false },
       },
-      resolve(type, { includeDeprecated }) {
+      resolve(type, { includeDeprecated, includeIAM }) {
         if (isObjectType(type) || isInterfaceType(type)) {
           let fields = objectValues(type.getFields());
           if (!includeDeprecated) {
             fields = fields.filter(field => !field.deprecationReason);
           }
+          if (!includeIAM) {
+            fields = fields.filter(field => !field.iamKey);
+          }
           return fields;
         }
         return null;
@@ -316,6 +320,9 @@ export const __Field = new GraphQLObjectType({
     deprecationReason: {
       type: GraphQLString,
     },
+    iamKey: {
+      type: GraphQLString,
+    },
   }),
 });
 
diff --git a/dist/type/introspection.mjs b/dist/type/introspection.mjs
index a75fa1d..437a47d 100644
--- a/dist/type/introspection.mjs
+++ b/dist/type/introspection.mjs
@@ -219,10 +219,12 @@ export var __Type = new GraphQLObjectType({
       fields: {
         type: GraphQLList(GraphQLNonNull(__Field)),
         args: {
-          includeDeprecated: { type: GraphQLBoolean, defaultValue: false }
+          includeDeprecated: { type: GraphQLBoolean, defaultValue: false },
+          includeIAM: { type: GraphQLBoolean, defaultValue: false }
         },
         resolve: function resolve(type, _ref) {
-          var includeDeprecated = _ref.includeDeprecated;
+          var includeDeprecated = _ref.includeDeprecated,
+              includeIAM = _ref.includeIAM;
 
           if (isObjectType(type) || isInterfaceType(type)) {
             var fields = objectValues(type.getFields());
@@ -231,6 +233,11 @@ export var __Type = new GraphQLObjectType({
                 return !field.deprecationReason;
               });
             }
+            if (!includeIAM) {
+              fields = fields.filter(function (field) {
+                return !field.iamKey;
+              });
+            }
             return fields;
           }
           return null;
@@ -304,6 +311,9 @@ export var __Field = new GraphQLObjectType({
       isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },
       deprecationReason: {
         type: GraphQLString
+      },
+      iamKey: {
+        type: GraphQLString
       }
     };
   }
diff --git a/dist/utilities/buildASTSchema.js b/dist/utilities/buildASTSchema.js
index 74e9fb8..40c0240 100644
--- a/dist/utilities/buildASTSchema.js
+++ b/dist/utilities/buildASTSchema.js
@@ -158,6 +158,12 @@ function buildASTSchema(ast, options) {
     directives.push(_directives.GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(function (directive) {
+    return directive.name === 'iam';
+  })) {
+    directives.push(_directives.GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -249,6 +255,7 @@ var ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field
     };
   };
@@ -403,6 +410,15 @@ function getDeprecationReason(node) {
   return deprecated && deprecated.reason;
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node) {
+  var iam = (0, _values.getDirectiveValues)(_directives.GraphQLIAMDirective, node);
+  return iam && iam.key;
+}
+
 /**
  * Given an ast node, returns its string description.
  *
diff --git a/dist/utilities/buildASTSchema.js.flow b/dist/utilities/buildASTSchema.js.flow
index 2ff2f7d..f91affb 100644
--- a/dist/utilities/buildASTSchema.js.flow
+++ b/dist/utilities/buildASTSchema.js.flow
@@ -58,6 +58,7 @@ import {
   GraphQLSkipDirective,
   GraphQLIncludeDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
 } from '../type/directives';
 
 import { introspectionTypes } from '../type/introspection';
@@ -202,6 +203,10 @@ export function buildASTSchema(
     directives.push(GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(directive => directive.name === 'iam')) {
+    directives.push(GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -314,6 +319,7 @@ export class ASTDefinitionBuilder {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field,
     };
   }
@@ -453,6 +459,15 @@ function getDeprecationReason(
   return deprecated && (deprecated.reason: any);
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node: FieldDefinitionNode): ?string {
+  const iam = getDirectiveValues(GraphQLIAMDirective, node);
+  return iam && (iam.key: any);
+}
+
 /**
  * Given an ast node, returns its string description.
  *
diff --git a/dist/utilities/buildASTSchema.mjs b/dist/utilities/buildASTSchema.mjs
index 755cf9c..e6ad171 100644
--- a/dist/utilities/buildASTSchema.mjs
+++ b/dist/utilities/buildASTSchema.mjs
@@ -22,7 +22,7 @@ import { Kind } from '../language/kinds';
 
 import { assertNullableType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from '../type/definition';
 
-import { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective } from '../type/directives';
+import { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective } from '../type/directives';
 
 import { introspectionTypes } from '../type/introspection';
 
@@ -138,6 +138,12 @@ export function buildASTSchema(ast, options) {
     directives.push(GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(function (directive) {
+    return directive.name === 'iam';
+  })) {
+    directives.push(GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -229,6 +235,7 @@ export var ASTDefinitionBuilder = function () {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field
     };
   };
@@ -381,6 +388,15 @@ function getDeprecationReason(node) {
   return deprecated && deprecated.reason;
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node) {
+  var iam = getDirectiveValues(GraphQLIAMDirective, node);
+  return iam && iam.key;
+}
+
 /**
  * Given an ast node, returns its string description.
  *
