diff --git README.md README.md
index 36cea79..aa36660 100644
--- README.md
+++ README.md
@@ -1,5 +1,9 @@
 # GraphQL.js
 
+See the README on the master branch!
+
+---
+
 The JavaScript reference implementation for GraphQL, a query language for APIs created by Facebook.
 
 [![npm version](https://badge.fury.io/js/graphql.svg)](http://badge.fury.io/js/graphql)
diff --git index.js index.js
index d734462..290a5ba 100644
--- index.js
+++ index.js
@@ -147,6 +147,12 @@ Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
     return _type.GraphQLDeprecatedDirective;
   }
 });
+Object.defineProperty(exports, 'GraphQLIAMDirective', {
+  enumerable: true,
+  get: function get() {
+    return _type.GraphQLIAMDirective;
+  }
+});
 Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
   enumerable: true,
   get: function get() {
@@ -1010,4 +1016,10 @@ Object.defineProperty(exports, 'findDeprecatedUsages', {
   get: function get() {
     return _utilities.findDeprecatedUsages;
   }
+});
+Object.defineProperty(exports, 'findIAMUsages', {
+  enumerable: true,
+  get: function get() {
+    return _utilities.findIAMUsages;
+  }
 });
\ No newline at end of file
diff --git index.js.flow index.js.flow
index 34fbd4b..02052ce 100644
--- index.js.flow
+++ index.js.flow
@@ -62,6 +62,7 @@ export {
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
   // Constant Deprecation Reason
   DEFAULT_DEPRECATION_REASON,
   // Meta-field definitions.
@@ -372,6 +373,7 @@ export {
   DangerousChangeType,
   // Report all deprecated usage within a GraphQL document.
   findDeprecatedUsages,
+  findIAMUsages,
 } from './utilities';
 
 export type {
diff --git index.mjs index.mjs
index 8feb594..96ff710 100644
--- index.mjs
+++ index.mjs
@@ -44,7 +44,7 @@ TypeKind,
 // Scalars
 specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID,
 // Built-in Directives defined by the Spec
-specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,
+specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective,
 // Constant Deprecation Reason
 DEFAULT_DEPRECATION_REASON,
 // Meta-field definitions.
@@ -145,4 +145,4 @@ isValidNameError,
 // Compares two GraphQLSchemas and detects breaking changes.
 findBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType,
 // Report all deprecated usage within a GraphQL document.
-findDeprecatedUsages } from './utilities';
\ No newline at end of file
+findDeprecatedUsages, findIAMUsages } from './utilities';
\ No newline at end of file
diff --git type/definition.js.flow type/definition.js.flow
index c1385da..e5e1a19 100644
--- type/definition.js.flow
+++ type/definition.js.flow
@@ -832,6 +832,7 @@ export type GraphQLFieldConfig<
   resolve?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   subscribe?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   deprecationReason?: ?string,
+  iamKey?: ?string,
   description?: ?string,
   astNode?: ?FieldDefinitionNode,
 };
@@ -862,6 +863,7 @@ export type GraphQLField<
   subscribe?: GraphQLFieldResolver<TSource, TContext, TArgs>,
   isDeprecated?: boolean,
   deprecationReason?: ?string,
+  iamKey?: ?string,
   astNode?: ?FieldDefinitionNode,
 };
 
diff --git type/directives.js type/directives.js
index 2d6861d..3c8434f 100644
--- type/directives.js
+++ type/directives.js
@@ -3,7 +3,7 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
+exports.specifiedDirectives = exports.GraphQLIAMDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
 exports.isDirective = isDirective;
 exports.isSpecifiedDirective = isSpecifiedDirective;
 
@@ -126,10 +126,25 @@ var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQ
   }
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+var GraphQLIAMDirective = exports.GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: _scalars.GraphQLString,
+      description: 'Defines the access key'
+    }
+  }
+});
+
 /**
  * The full list of specified directives.
  */
-var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];
+var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective];
 
 function isSpecifiedDirective(directive) {
   return specifiedDirectives.some(function (specifiedDirective) {
diff --git type/directives.js.flow type/directives.js.flow
index 9d4d776..0d3667a 100644
--- type/directives.js.flow
+++ type/directives.js.flow
@@ -150,6 +150,21 @@ export const GraphQLDeprecatedDirective = new GraphQLDirective({
   },
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+export const GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: GraphQLString,
+      description: 'Defines the access key',
+    },
+  },
+});
+
 /**
  * The full list of specified directives.
  */
@@ -157,6 +172,7 @@ export const specifiedDirectives: $ReadOnlyArray<*> = [
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
 ];
 
 export function isSpecifiedDirective(
diff --git type/directives.mjs type/directives.mjs
index 7ebf453..92cf953 100644
--- type/directives.mjs
+++ type/directives.mjs
@@ -107,10 +107,25 @@ export var GraphQLDeprecatedDirective = new GraphQLDirective({
   }
 });
 
+/**
+ * Used to declare element of a GraphQL schema as restricted via IAM permissions.
+ */
+export var GraphQLIAMDirective = new GraphQLDirective({
+  name: 'iam',
+  description: 'Annotates the neccessary access permissions for the element.',
+  locations: [DirectiveLocation.FIELD_DEFINITION],
+  args: {
+    key: {
+      type: GraphQLString,
+      description: 'Defines the access key'
+    }
+  }
+});
+
 /**
  * The full list of specified directives.
  */
-export var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];
+export var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective];
 
 export function isSpecifiedDirective(directive) {
   return specifiedDirectives.some(function (specifiedDirective) {
diff --git type/index.js type/index.js
index d2f215c..b63c881 100644
--- type/index.js
+++ type/index.js
@@ -330,6 +330,12 @@ Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
     return _directives.GraphQLDeprecatedDirective;
   }
 });
+Object.defineProperty(exports, 'GraphQLIAMDirective', {
+  enumerable: true,
+  get: function get() {
+    return _directives.GraphQLIAMDirective;
+  }
+});
 Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
   enumerable: true,
   get: function get() {
diff --git type/index.js.flow type/index.js.flow
index f7ac4fd..d7d1970 100644
--- type/index.js.flow
+++ type/index.js.flow
@@ -79,6 +79,7 @@ export {
   GraphQLIncludeDirective,
   GraphQLSkipDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
   // Constant Deprecation Reason
   DEFAULT_DEPRECATION_REASON,
 } from './directives';
diff --git type/index.mjs type/index.mjs
index 50d5cff..20114c9 100644
--- type/index.mjs
+++ type/index.mjs
@@ -31,7 +31,7 @@ isDirective,
 // Directives Definition
 GraphQLDirective,
 // Built-in Directives defined by the Spec
-isSpecifiedDirective, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective,
+isSpecifiedDirective, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective,
 // Constant Deprecation Reason
 DEFAULT_DEPRECATION_REASON } from './directives';
 
diff --git type/introspection.js type/introspection.js
index a64fc6c..403cad7 100644
--- type/introspection.js
+++ type/introspection.js
@@ -236,10 +236,12 @@ var __Type = exports.__Type = new _definition.GraphQLObjectType({
       fields: {
         type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Field)),
         args: {
-          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
+          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false },
+          includeIAM: { type: _scalars.GraphQLBoolean, defaultValue: false }
         },
         resolve: function resolve(type, _ref) {
-          var includeDeprecated = _ref.includeDeprecated;
+          var includeDeprecated = _ref.includeDeprecated,
+              includeIAM = _ref.includeIAM;
 
           if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
             var fields = (0, _objectValues2.default)(type.getFields());
@@ -248,6 +250,11 @@ var __Type = exports.__Type = new _definition.GraphQLObjectType({
                 return !field.deprecationReason;
               });
             }
+            if (!includeIAM) {
+              fields = fields.filter(function (field) {
+                return !field.iamKey;
+              });
+            }
             return fields;
           }
           return null;
@@ -321,6 +328,9 @@ var __Field = exports.__Field = new _definition.GraphQLObjectType({
       isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
       deprecationReason: {
         type: _scalars.GraphQLString
+      },
+      iamKey: {
+        type: _scalars.GraphQLString
       }
     };
   }
diff --git type/introspection.js.flow type/introspection.js.flow
index a4810c6..6fd6207 100644
--- type/introspection.js.flow
+++ type/introspection.js.flow
@@ -243,13 +243,17 @@ export const __Type = new GraphQLObjectType({
       type: GraphQLList(GraphQLNonNull(__Field)),
       args: {
         includeDeprecated: { type: GraphQLBoolean, defaultValue: false },
+        includeIAM: { type: GraphQLBoolean, defaultValue: false },
       },
-      resolve(type, { includeDeprecated }) {
+      resolve(type, { includeDeprecated, includeIAM }) {
         if (isObjectType(type) || isInterfaceType(type)) {
           let fields = objectValues(type.getFields());
           if (!includeDeprecated) {
             fields = fields.filter(field => !field.deprecationReason);
           }
+          if (!includeIAM) {
+            fields = fields.filter(field => !field.iamKey);
+          }
           return fields;
         }
         return null;
@@ -316,6 +320,9 @@ export const __Field = new GraphQLObjectType({
     deprecationReason: {
       type: GraphQLString,
     },
+    iamKey: {
+      type: GraphQLString,
+    },
   }),
 });
 
diff --git type/introspection.mjs type/introspection.mjs
index a75fa1d..437a47d 100644
--- type/introspection.mjs
+++ type/introspection.mjs
@@ -219,10 +219,12 @@ export var __Type = new GraphQLObjectType({
       fields: {
         type: GraphQLList(GraphQLNonNull(__Field)),
         args: {
-          includeDeprecated: { type: GraphQLBoolean, defaultValue: false }
+          includeDeprecated: { type: GraphQLBoolean, defaultValue: false },
+          includeIAM: { type: GraphQLBoolean, defaultValue: false }
         },
         resolve: function resolve(type, _ref) {
-          var includeDeprecated = _ref.includeDeprecated;
+          var includeDeprecated = _ref.includeDeprecated,
+              includeIAM = _ref.includeIAM;
 
           if (isObjectType(type) || isInterfaceType(type)) {
             var fields = objectValues(type.getFields());
@@ -231,6 +233,11 @@ export var __Type = new GraphQLObjectType({
                 return !field.deprecationReason;
               });
             }
+            if (!includeIAM) {
+              fields = fields.filter(function (field) {
+                return !field.iamKey;
+              });
+            }
             return fields;
           }
           return null;
@@ -304,6 +311,9 @@ export var __Field = new GraphQLObjectType({
       isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },
       deprecationReason: {
         type: GraphQLString
+      },
+      iamKey: {
+        type: GraphQLString
       }
     };
   }
diff --git utilities/buildASTSchema.js utilities/buildASTSchema.js
index 74e9fb8..40c0240 100644
--- utilities/buildASTSchema.js
+++ utilities/buildASTSchema.js
@@ -158,6 +158,12 @@ function buildASTSchema(ast, options) {
     directives.push(_directives.GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(function (directive) {
+    return directive.name === 'iam';
+  })) {
+    directives.push(_directives.GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -249,6 +255,7 @@ var ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field
     };
   };
@@ -403,6 +410,15 @@ function getDeprecationReason(node) {
   return deprecated && deprecated.reason;
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node) {
+  var iam = (0, _values.getDirectiveValues)(_directives.GraphQLIAMDirective, node);
+  return iam && iam.key;
+}
+
 /**
  * Given an ast node, returns its string description.
  *
diff --git utilities/buildASTSchema.js.flow utilities/buildASTSchema.js.flow
index 2ff2f7d..f91affb 100644
--- utilities/buildASTSchema.js.flow
+++ utilities/buildASTSchema.js.flow
@@ -58,6 +58,7 @@ import {
   GraphQLSkipDirective,
   GraphQLIncludeDirective,
   GraphQLDeprecatedDirective,
+  GraphQLIAMDirective,
 } from '../type/directives';
 
 import { introspectionTypes } from '../type/introspection';
@@ -202,6 +203,10 @@ export function buildASTSchema(
     directives.push(GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(directive => directive.name === 'iam')) {
+    directives.push(GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -314,6 +319,7 @@ export class ASTDefinitionBuilder {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field,
     };
   }
@@ -453,6 +459,15 @@ function getDeprecationReason(
   return deprecated && (deprecated.reason: any);
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node: FieldDefinitionNode): ?string {
+  const iam = getDirectiveValues(GraphQLIAMDirective, node);
+  return iam && (iam.key: any);
+}
+
 /**
  * Given an ast node, returns its string description.
  *
diff --git utilities/buildASTSchema.mjs utilities/buildASTSchema.mjs
index 755cf9c..e6ad171 100644
--- utilities/buildASTSchema.mjs
+++ utilities/buildASTSchema.mjs
@@ -22,7 +22,7 @@ import { Kind } from '../language/kinds';
 
 import { assertNullableType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from '../type/definition';
 
-import { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective } from '../type/directives';
+import { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective, GraphQLIAMDirective } from '../type/directives';
 
 import { introspectionTypes } from '../type/introspection';
 
@@ -138,6 +138,12 @@ export function buildASTSchema(ast, options) {
     directives.push(GraphQLDeprecatedDirective);
   }
 
+  if (!directives.some(function (directive) {
+    return directive.name === 'iam';
+  })) {
+    directives.push(GraphQLIAMDirective);
+  }
+
   // Note: While this could make early assertions to get the correctly
   // typed values below, that would throw immediately while type system
   // validation with validateSchema() will produce more actionable results.
@@ -229,6 +235,7 @@ export var ASTDefinitionBuilder = function () {
       description: getDescription(field, this._options),
       args: field.arguments && this._makeInputValues(field.arguments),
       deprecationReason: getDeprecationReason(field),
+      iamKey: getIAMKey(field),
       astNode: field
     };
   };
@@ -381,6 +388,15 @@ function getDeprecationReason(node) {
   return deprecated && deprecated.reason;
 }
 
+/**
+ * Given a field, returns the string value for the
+ * IAM key.
+ */
+function getIAMKey(node) {
+  var iam = getDirectiveValues(GraphQLIAMDirective, node);
+  return iam && iam.key;
+}
+
 /**
  * Given an ast node, returns its string description.
  *
diff --git utilities/buildClientSchema.js utilities/buildClientSchema.js
index 8869940..02cc5f5 100644
--- utilities/buildClientSchema.js
+++ utilities/buildClientSchema.js
@@ -233,6 +233,7 @@ function buildClientSchema(introspection, options) {
       return {
         description: fieldIntrospection.description,
         deprecationReason: fieldIntrospection.deprecationReason,
+        iamKey: fieldIntrospection.iamKey,
         type: getOutputType(fieldIntrospection.type),
         args: buildInputValueDefMap(fieldIntrospection.args)
       };
diff --git utilities/buildClientSchema.js.flow utilities/buildClientSchema.js.flow
index b86b9bf..c0093bc 100644
--- utilities/buildClientSchema.js.flow
+++ utilities/buildClientSchema.js.flow
@@ -312,6 +312,7 @@ export function buildClientSchema(
         return {
           description: fieldIntrospection.description,
           deprecationReason: fieldIntrospection.deprecationReason,
+          iamKey: fieldIntrospection.iamKey,
           type: getOutputType(fieldIntrospection.type),
           args: buildInputValueDefMap(fieldIntrospection.args),
         };
diff --git utilities/buildClientSchema.mjs utilities/buildClientSchema.mjs
index b864b7b..04dcb81 100644
--- utilities/buildClientSchema.mjs
+++ utilities/buildClientSchema.mjs
@@ -222,6 +222,7 @@ export function buildClientSchema(introspection, options) {
       return {
         description: fieldIntrospection.description,
         deprecationReason: fieldIntrospection.deprecationReason,
+        iamKey: fieldIntrospection.iamKey,
         type: getOutputType(fieldIntrospection.type),
         args: buildInputValueDefMap(fieldIntrospection.args)
       };
diff --git utilities/extendSchema.js utilities/extendSchema.js
index 11c77de..1383f4e 100644
--- utilities/extendSchema.js
+++ utilities/extendSchema.js
@@ -276,6 +276,7 @@ function extendSchema(schema, documentAST, options) {
       newFieldMap[fieldName] = {
         description: field.description,
         deprecationReason: field.deprecationReason,
+        iamKey: field.iamKey,
         type: extendFieldType(field.type),
         args: (0, _keyMap2.default)(field.args, function (arg) {
           return arg.name;
diff --git utilities/extendSchema.js.flow utilities/extendSchema.js.flow
index cab1321..5df7fcc 100644
--- utilities/extendSchema.js.flow
+++ utilities/extendSchema.js.flow
@@ -338,6 +338,7 @@ export function extendSchema(
       newFieldMap[fieldName] = {
         description: field.description,
         deprecationReason: field.deprecationReason,
+        iamKey: field.iamKey,
         type: extendFieldType(field.type),
         args: keyMap(field.args, arg => arg.name),
         astNode: field.astNode,
diff --git utilities/extendSchema.mjs utilities/extendSchema.mjs
index 1585090..b368791 100644
--- utilities/extendSchema.mjs
+++ utilities/extendSchema.mjs
@@ -255,6 +255,7 @@ export function extendSchema(schema, documentAST, options) {
       newFieldMap[fieldName] = {
         description: field.description,
         deprecationReason: field.deprecationReason,
+        iamKey: field.iamKey,
         type: extendFieldType(field.type),
         args: keyMap(field.args, function (arg) {
           return arg.name;
diff --git utilities/findDeprecatedUsages.js utilities/findDeprecatedUsages.js
index b46447f..437fad5 100644
--- utilities/findDeprecatedUsages.js
+++ utilities/findDeprecatedUsages.js
@@ -4,6 +4,7 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.findDeprecatedUsages = findDeprecatedUsages;
+exports.findIAMUsages = findIAMUsages;
 
 var _GraphQLError = require('../error/GraphQLError');
 
@@ -55,4 +56,27 @@ function findDeprecatedUsages(schema, ast) {
    * LICENSE file in the root directory of this source tree.
    *
    *  strict
-   */
\ No newline at end of file
+   */
+
+function findIAMUsages(schema, ast) {
+  var errors = [];
+  var typeInfo = new _TypeInfo.TypeInfo(schema);
+
+  (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {
+    Field: function Field(node) {
+      var fieldDef = typeInfo.getFieldDef();
+      if (fieldDef && fieldDef.iamKey) {
+        var parentType = typeInfo.getParentType();
+        if (parentType) {
+          var key = fieldDef.iamKey;
+          if (key === null || key === undefined || key === '') {
+            key = 'NULL';
+          }
+          errors.push(new _GraphQLError.GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is restricted with key ' + key, [node]));
+        }
+      }
+    }
+  }));
+
+  return errors;
+}
\ No newline at end of file
diff --git utilities/findDeprecatedUsages.js.flow utilities/findDeprecatedUsages.js.flow
index ae4c1de..2cd3c59 100644
--- utilities/findDeprecatedUsages.js.flow
+++ utilities/findDeprecatedUsages.js.flow
@@ -66,3 +66,39 @@ export function findDeprecatedUsages(
 
   return errors;
 }
+
+export function findIAMUsages(
+  schema: GraphQLSchema,
+  ast: DocumentNode,
+): Array<GraphQLError> {
+  const errors = [];
+  const typeInfo = new TypeInfo(schema);
+
+  visit(
+    ast,
+    visitWithTypeInfo(typeInfo, {
+      Field(node) {
+        const fieldDef = typeInfo.getFieldDef();
+        if (fieldDef && fieldDef.iamKey) {
+          const parentType = typeInfo.getParentType();
+          if (parentType) {
+            let key = fieldDef.iamKey;
+            if (key === null || key === undefined || key === '') {
+              key = 'NULL';
+            }
+            errors.push(
+              new GraphQLError(
+                `The field ${parentType.name}.${
+                  fieldDef.name
+                } is restricted with key ${key}`,
+                [node],
+              ),
+            );
+          }
+        }
+      },
+    }),
+  );
+
+  return errors;
+}
diff --git utilities/findDeprecatedUsages.mjs utilities/findDeprecatedUsages.mjs
index 50f89b4..8fbcf21 100644
--- utilities/findDeprecatedUsages.mjs
+++ utilities/findDeprecatedUsages.mjs
@@ -46,5 +46,28 @@ export function findDeprecatedUsages(schema, ast) {
     }
   }));
 
+  return errors;
+}
+
+export function findIAMUsages(schema, ast) {
+  var errors = [];
+  var typeInfo = new TypeInfo(schema);
+
+  visit(ast, visitWithTypeInfo(typeInfo, {
+    Field: function Field(node) {
+      var fieldDef = typeInfo.getFieldDef();
+      if (fieldDef && fieldDef.iamKey) {
+        var parentType = typeInfo.getParentType();
+        if (parentType) {
+          var key = fieldDef.iamKey;
+          if (key === null || key === undefined || key === '') {
+            key = 'NULL';
+          }
+          errors.push(new GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is restricted with key ' + key, [node]));
+        }
+      }
+    }
+  }));
+
   return errors;
 }
\ No newline at end of file
diff --git utilities/index.js utilities/index.js
index 2853361..f8c2e62 100644
--- utilities/index.js
+++ utilities/index.js
@@ -266,4 +266,10 @@ Object.defineProperty(exports, 'findDeprecatedUsages', {
   get: function get() {
     return _findDeprecatedUsages.findDeprecatedUsages;
   }
+});
+Object.defineProperty(exports, 'findIAMUsages', {
+  enumerable: true,
+  get: function get() {
+    return _findDeprecatedUsages.findIAMUsages;
+  }
 });
\ No newline at end of file
diff --git utilities/index.js.flow utilities/index.js.flow
index e627206..c74831f 100644
--- utilities/index.js.flow
+++ utilities/index.js.flow
@@ -115,4 +115,4 @@ export {
 export type { BreakingChange, DangerousChange } from './findBreakingChanges';
 
 // Report all deprecated usage within a GraphQL document.
-export { findDeprecatedUsages } from './findDeprecatedUsages';
+export { findDeprecatedUsages, findIAMUsages } from './findDeprecatedUsages';
diff --git utilities/index.mjs utilities/index.mjs
index bca778d..ef6b82b 100644
--- utilities/index.mjs
+++ utilities/index.mjs
@@ -77,4 +77,4 @@ export { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDange
 
 
 // Report all deprecated usage within a GraphQL document.
-export { findDeprecatedUsages } from './findDeprecatedUsages';
\ No newline at end of file
+export { findDeprecatedUsages, findIAMUsages } from './findDeprecatedUsages';
\ No newline at end of file
diff --git utilities/introspectionQuery.js utilities/introspectionQuery.js
index 9a6847e..f019639 100644
--- utilities/introspectionQuery.js
+++ utilities/introspectionQuery.js
@@ -15,7 +15,7 @@ exports.getIntrospectionQuery = getIntrospectionQuery;
 
 function getIntrospectionQuery(options) {
   var descriptions = !(options && options.descriptions === false);
-  return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
+  return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true, includeIAM: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n        iamKey\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
 }
 
 var introspectionQuery = exports.introspectionQuery = getIntrospectionQuery();
\ No newline at end of file
diff --git utilities/introspectionQuery.js.flow utilities/introspectionQuery.js.flow
index 9c67dbd..b1a55c8 100644
--- utilities/introspectionQuery.js.flow
+++ utilities/introspectionQuery.js.flow
@@ -41,7 +41,7 @@ export function getIntrospectionQuery(options?: IntrospectionOptions): string {
       kind
       name
       ${descriptions ? 'description' : ''}
-      fields(includeDeprecated: true) {
+      fields(includeDeprecated: true, includeIAM: true) {
         name
         ${descriptions ? 'description' : ''}
         args {
@@ -52,6 +52,7 @@ export function getIntrospectionQuery(options?: IntrospectionOptions): string {
         }
         isDeprecated
         deprecationReason
+        iamKey
       }
       inputFields {
         ...InputValue
@@ -247,6 +248,7 @@ export type IntrospectionField = {|
   +type: IntrospectionOutputTypeRef,
   +isDeprecated: boolean,
   +deprecationReason: ?string,
+  +iamKey: ?string,
 |};
 
 export type IntrospectionInputValue = {|
diff --git utilities/introspectionQuery.mjs utilities/introspectionQuery.mjs
index 150b23b..82f6342 100644
--- utilities/introspectionQuery.mjs
+++ utilities/introspectionQuery.mjs
@@ -9,7 +9,7 @@
 
 export function getIntrospectionQuery(options) {
   var descriptions = !(options && options.descriptions === false);
-  return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
+  return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true, includeIAM: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n        iamKey\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
 }
 
 export var introspectionQuery = getIntrospectionQuery();
\ No newline at end of file
diff --git utilities/lexicographicSortSchema.js utilities/lexicographicSortSchema.js
index cca9ca4..8c32928 100644
--- utilities/lexicographicSortSchema.js
+++ utilities/lexicographicSortSchema.js
@@ -83,6 +83,7 @@ function lexicographicSortSchema(schema) {
         resolve: field.resolve,
         subscribe: field.subscribe,
         deprecationReason: field.deprecationReason,
+        iamKey: field.iamKey,
         description: field.description,
         astNode: field.astNode
       };
diff --git utilities/lexicographicSortSchema.js.flow utilities/lexicographicSortSchema.js.flow
index 570d3e4..ee8c44e 100644
--- utilities/lexicographicSortSchema.js.flow
+++ utilities/lexicographicSortSchema.js.flow
@@ -77,6 +77,7 @@ export function lexicographicSortSchema(schema: GraphQLSchema): GraphQLSchema {
       resolve: field.resolve,
       subscribe: field.subscribe,
       deprecationReason: field.deprecationReason,
+      iamKey: field.iamKey,
       description: field.description,
       astNode: field.astNode,
     }));
diff --git utilities/lexicographicSortSchema.mjs utilities/lexicographicSortSchema.mjs
index bc9416d..baf5c58 100644
--- utilities/lexicographicSortSchema.mjs
+++ utilities/lexicographicSortSchema.mjs
@@ -65,6 +65,7 @@ export function lexicographicSortSchema(schema) {
         resolve: field.resolve,
         subscribe: field.subscribe,
         deprecationReason: field.deprecationReason,
+        iamKey: field.iamKey,
         description: field.description,
         astNode: field.astNode
       };
diff --git utilities/schemaPrinter.js utilities/schemaPrinter.js
index 46ada09..8a892dd 100644
--- utilities/schemaPrinter.js
+++ utilities/schemaPrinter.js
@@ -189,7 +189,7 @@ function printInputObject(type, options) {
 function printFields(options, type) {
   var fields = (0, _objectValues2.default)(type.getFields());
   return fields.map(function (f, i) {
-    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
+    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f) + printIAM(f);
   }).join('\n');
 }
 
@@ -235,6 +235,17 @@ function printDeprecated(fieldOrEnumVal) {
   return ' @deprecated(reason: ' + (0, _printer.print)((0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString)) + ')';
 }
 
+function printIAM(field) {
+  if (!field.iamKey) {
+    return '';
+  }
+  var key = field.iamKey;
+  if (key === null || key === undefined || key === '') {
+    return ' @iam';
+  }
+  return ' @iam(key: ' + (0, _printer.print)((0, _astFromValue.astFromValue)(key, _scalars.GraphQLString)) + ')';
+}
+
 function printDescription(options, def) {
   var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
   var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
diff --git utilities/schemaPrinter.js.flow utilities/schemaPrinter.js.flow
index a630f27..18c3f5a 100644
--- utilities/schemaPrinter.js.flow
+++ utilities/schemaPrinter.js.flow
@@ -253,7 +253,8 @@ function printFields(options, type) {
         printArgs(options, f.args, '  ') +
         ': ' +
         String(f.type) +
-        printDeprecated(f),
+        printDeprecated(f) +
+        printIAM(f),
     )
     .join('\n');
 }
@@ -321,6 +322,17 @@ function printDeprecated(fieldOrEnumVal) {
   );
 }
 
+function printIAM(field) {
+  if (!field.iamKey) {
+    return '';
+  }
+  const key = field.iamKey;
+  if (key === null || key === undefined || key === '') {
+    return ' @iam';
+  }
+  return ' @iam(key: ' + print(astFromValue(key, GraphQLString)) + ')';
+}
+
 function printDescription(
   options,
   def,
diff --git utilities/schemaPrinter.mjs utilities/schemaPrinter.mjs
index 9dd858a..105b9e8 100644
--- utilities/schemaPrinter.mjs
+++ utilities/schemaPrinter.mjs
@@ -168,7 +168,7 @@ function printInputObject(type, options) {
 function printFields(options, type) {
   var fields = objectValues(type.getFields());
   return fields.map(function (f, i) {
-    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
+    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f) + printIAM(f);
   }).join('\n');
 }
 
@@ -214,6 +214,17 @@ function printDeprecated(fieldOrEnumVal) {
   return ' @deprecated(reason: ' + print(astFromValue(reason, GraphQLString)) + ')';
 }
 
+function printIAM(field) {
+  if (!field.iamKey) {
+    return '';
+  }
+  var key = field.iamKey;
+  if (key === null || key === undefined || key === '') {
+    return ' @iam';
+  }
+  return ' @iam(key: ' + print(astFromValue(key, GraphQLString)) + ')';
+}
+
 function printDescription(options, def) {
   var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
   var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
